@model IEnumerable<DoAnLTW.Models.Product>

@{
    ViewData["Title"] = "Sản phẩm";
    Layout = "_LayoutProduct";
}
<div class="product-main-container">
    <!-- Sidebar -->
    <div class="product-sidebar">
        @await Component.InvokeAsync("Sidebar")
    </div>
    <!-- Container cho các section sản phẩm -->
    <div class="product-content">
        <!-- Kết quả tìm kiếm -->
        <h2 id="search-title" style="display: none;">Kết quả tìm kiếm</h2>
        <section class="product-filter" id="product-container">
        </section>

        <!-- Sản phẩm nổi bật -->
        <section class="product-section">
            <div class="section-header">
                <h2>Sản phẩm nổi bật</h2>
                <a href="#" class="view-all">Xem tất cả</a>
            </div>
            <div class="product-row-container">
                <button class="scroll-btn scroll-left" aria-label="Scroll left">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <div class="product-row">
                    @await Component.InvokeAsync("ProductDisplay", new { type = "featured", count = 8 })
                </div>
                <button class="scroll-btn scroll-right" aria-label="Scroll right">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </section>

        <!-- Sản phẩm bán chạy -->
        <section class="product-section">
            <div class="section-header">
                <h2>Sản phẩm bán chạy</h2>
                <a href="#" class="view-all">Xem tất cả</a>
            </div>
            <div class="product-row-container">
                <button class="scroll-btn scroll-left" aria-label="Scroll left">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <div class="product-row">
                    @await Component.InvokeAsync("ProductDisplay", new { type = "bestseller", count = 8 })
                </div>
                <button class="scroll-btn scroll-right" aria-label="Scroll right">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </section>

        <!-- Categories Section -->
        <section class="categories">
            <div class="section-header">
                <h2><i class="fas fa-list"></i> Danh mục sản phẩm</h2>
                <a asp-controller="Product" asp-action="Index" class="view-all">Xem tất cả <i class="fas fa-arrow-right"></i></a>
            </div>
            <div class="category-grid">
                @await Component.InvokeAsync("CategoryList")
            </div>
        </section>
    </div>
</div>

<!-- All Products Section -->
<section class="all-product-section">
    <div class="all-product-section-header">
        <h2>Tất cả sản phẩm</h2>
    </div>
    <div id="loadproduct-container"></div>
    <div id="load-trigger"></div>
</section>

<style>
    .product-main-container {
        display: flex;
        width: 100%;
        min-height: 100vh;
    }

    .product-sidebar {
        width: 25%;
        padding: 20px;
        background-color: #f8f9fa;
        overflow-y: auto;
        position: sticky;
        top: 0;
    }

    .product-content {
        width: 75%;
        padding: 20px;
    }

    .product-section {
        margin-bottom: 40px;
    }

    .product-row-container {
        position: relative;
    }

    .product-row {
        display: flex;
        gap: 20px;
        overflow-x: auto;
        scroll-behavior: smooth;
        padding: 10px 0;
    }

    .scroll-btn {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background-color: #fff;
        border: none;
        padding: 10px;
        cursor: pointer;
        z-index: 10;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .scroll-left {
        left: 0;
    }

    .scroll-right {
        right: 0;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .view-all {
        color: #FF8C00;
        text-decoration: none;
    }

        .view-all:hover {
            text-decoration: underline;
        }

    .categories .category-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 20px;
    }

    /* Responsive */
    media (max-width: 768px) {
        .product-main-container

    {
        flex-direction: column;
    }

    .product-sidebar {
        width: 100%;
        position: relative;
        top: auto;
    }

    .product-content {
        width: 100%;
    }

    .product-row {
        flex-wrap: wrap;
    }

    .scroll-btn {
        display: none; /* Ẩn nút scroll trên mobile */
    }

    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add to cart functionality
            document.querySelectorAll('.add-to-cart-btn').forEach(button => {
                button.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const productId = this.dataset.productId;
                    try {
                        const response = await fetch('/ShoppingCart/AddToCart', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                productId: parseInt(productId),
                                quantity: 1
                            })
                        });

                        const result = await response.json();
                        if (result.success) {
                            const toast = document.createElement('div');
                            toast.className = 'toast success';
                            toast.textContent = result.message;
                            document.body.appendChild(toast);
                            setTimeout(() => toast.remove(), 3000);
                        } else {
                            const toast = document.createElement('div');
                            toast.className = 'toast error';
                            toast.textContent = result.message;
                            document.body.appendChild(toast);
                            setTimeout(() => toast.remove(), 3000);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        const toast = document.createElement('div');
                        toast.className = 'toast error';
                        toast.textContent = 'Có lỗi xảy ra khi thêm vào giỏ hàng';
                        document.body.appendChild(toast);
                        setTimeout(() => toast.remove(), 3000);
                    }
                });
            });

            // Horizontal scroll for product rows
            document.querySelectorAll('.product-row-container').forEach(container => {
                const row = container.querySelector('.product-row');
                const leftBtn = container.querySelector('.scroll-left');
                const rightBtn = container.querySelector('.scroll-right');

                const updateScrollButtons = () => {
                    leftBtn.style.display = row.scrollLeft > 0 ? 'flex' : 'none';
                    rightBtn.style.display = row.scrollLeft < (row.scrollWidth - row.clientWidth) ? 'flex' : 'none';
                };

                row.addEventListener('scroll', updateScrollButtons);
                window.addEventListener('resize', updateScrollButtons);
                updateScrollButtons();

                leftBtn.addEventListener('click', () => {
                    row.scrollBy({
                        left: -300,
                        behavior: 'smooth'
                    });
                });

                rightBtn.addEventListener('click', () => {
                    row.scrollBy({
                        left: 300,
                        behavior: 'smooth'
                    });
                });
            });
        });

        let page = 1;
        let isLoading = false;
        let hasMoreProducts = true;
        let observer = null;

        function loadProduct() {
            if (isLoading || !hasMoreProducts) return;
            isLoading = true;

            $.ajax({
                url: '@Url.Action("LoadMoreProducts", "Product")',
                type: 'GET',
                data: { page: page },
                success: function (data) {
                    if (data.trim() === '') {
                        hasMoreProducts = false;
                        if (observer) observer.disconnect();
                    } else {
                        $('#loadproduct-container').append(data);
                        page++;
                    }
                    isLoading = false;
                },
                error: function () {
                    isLoading = false;
                }
            });
        }

        $(document).ready(function () {
            loadProduct();

            let trigger = document.getElementById('load-trigger');
            if (trigger) {
                observer = new IntersectionObserver(function (entries) {
                    if (entries[0].isIntersecting) {
                        loadProduct();
                    }
                }, { threshold: 1.0 });

                observer.observe(trigger);
            }
        });
    </script>
}